{"version":3,"sources":["logo.svg","Film.js","Films.js","People.js","PeopleArray.js","Buttons.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Film","title","episode","director","openingcrawl","FilmArray","films","map","data","i","className","key","episode_id","opening_crawl","People","name","height","hairColor","eyeColor","PeopleArray","people","hair_color","eye_color","Buttons","onClickPeople","onClickFilms","src","alt","value","onClick","peopleURLS","App","state","onFilmsClick","bind","onPeopleClick","this","GetFilms","setState","GetPeople","fetch","then","response","json","results","Promise","all","url","a","concat","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4JAAAA,EAAOC,QAAU,IAA0B,kC,uLCc5BC,G,YAZF,SAAC,GAA2C,IAA1CC,EAAyC,EAAzCA,MAAMC,EAAmC,EAAnCA,QAAQC,EAA2B,EAA3BA,SAASC,EAAkB,EAAlBA,aACrC,OACE,6BACA,4BAAKH,GACL,wCAAcE,GACd,sCAAYD,GACZ,4BAAKE,MCsBOC,EA3BE,SAAC,GAAa,IAAZC,EAAW,EAAXA,MAClB,OAGCA,EAAMC,IAAI,SAACC,EAAKC,GACf,OACC,yBAAKC,UAAU,8CAChB,kBAAC,EAAD,CACAC,IAAOF,EACPR,MAASK,EAAMG,GAAGR,MAClBE,SAAWG,EAAMG,GAAGN,SACpBD,QAAUI,EAAMG,GAAGG,WACnBR,aAAeE,EAAMG,GAAGI,oBCDZC,EAZC,SAAC,GAAsC,IAArCC,EAAoC,EAApCA,KAAKC,EAA+B,EAA/BA,OAAOC,EAAwB,EAAxBA,UAAUC,EAAc,EAAdA,SACvC,OACC,6BACC,4BAAKH,GACL,uCAAaC,GACb,2CAAiBC,GACjB,0CAAgBC,KCoBJC,EAxBK,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACrB,OAGEA,EAAOb,IAAI,SAACC,EAAKC,GAChB,OACC,yBAAKC,UAAU,8CAChB,kBAAC,EAAD,CACAC,IAAOF,EACPM,KAAQK,EAAOX,GAAGM,KAClBC,OAASI,EAAOX,GAAGO,OACnBC,UAAWG,EAAOX,GAAGY,WACrBH,SAAUE,EAAOX,GAAGa,gBCDTC,G,MAZC,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,cAAcC,EAAkB,EAAlBA,aAC/B,OACC,yBAAKf,UAAW,aAGN,4BAAQA,UAAU,yEAAyEgB,IAAI,IAAIC,IAAI,GAAGC,MAAM,QAAOC,QAASJ,GAAhI,SACV,4BAAQf,UAAU,yEAAyEgB,IAAI,IAAIC,IAAI,GAAGC,MAAM,SAASC,QAASL,GAAlI,iBCEIM,EAAW,CACf,+BACA,sCACA,sCACA,sCACA,sCACA,sCACA,sCACA,uCA+DaC,E,YA1Db,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CACX1B,MAAM,GACNc,OAAO,IAGR,EAAKa,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,gBARV,E,4EAYZE,KAAKC,WACLD,KAAKE,SAAS,CAAClB,OAAQ,O,sCAIvBgB,KAAKE,SAAS,CAAClB,OAAQ,KACvBgB,KAAKG,YACLH,KAAKE,SAAS,CAAChC,MAAO,O,iCAIf,IAAD,OAEJkC,MAAM,+BACHC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAjC,GAAS,EAAK8B,SAAS,CAAChC,MAAME,EAAKoC,c,kCAIpC,IAAD,OACVC,QAAQC,IAAIhB,EAAWvB,IAAX,sCAAe,WAAMwC,GAAN,SAAAC,EAAA,qEACnBR,MAAMO,GACPN,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAjC,GAAS,EAAK8B,SAAS,CAAClB,OAAO,EAAKY,MAAMZ,OAAO6B,OAAOzC,EAAKoC,aAH9C,yCAAf,0D,+BAWV,OACE,yBAAKlC,UAAW,MAChB,yBAAKA,UAAY,YAAjB,aACA,kBAAC,EAAD,CACAc,cAAiBY,KAAKD,cACtBV,aAAgBW,KAAKH,eAEvB,kBAAC,EAAD,CAAW3B,MAAQ8B,KAAKJ,MAAM1B,QAC9B,kBAAC,EAAD,CAAac,OAAUgB,KAAKJ,MAAMZ,c,GApDpB8B,aCXEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.9d853238.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\nconst Film = ({title,episode,director,openingcrawl}) => {\n\treturn (\n\t\t\t<div>\n\t\t\t<h1>{title}</h1>\n\t\t\t<h2>Director:{director}</h2> \n\t\t\t<p>Episode:{episode}</p>\n\t\t\t<h2>{openingcrawl}</h2> \n\t\t\t</div>\n\t\t)\n\n}\n\nexport default Film;","import React from 'react';\nimport Film from './Film';\n\nconst FilmArray =({films}) => {\n\treturn(\n\t\t\t\n\n\t\tfilms.map((data,i) => {\n\t\t\treturn(\n\t\t\t\t<div className=\"bg-yellow shadow-5 tc dib pa4 ma3 br3 grow\">\n\t\t\t<Film\n\t\t\tkey = {i}\n\t\t\ttitle = {films[i].title}\n\t\t\tdirector ={films[i].director}\n\t\t\tepisode ={films[i].episode_id}\n\t\t\topeningcrawl ={films[i].opening_crawl}\n\t\t\t/>\n\t\t\t</div> \n\t\t\t)\n\n\t\t})\n\t\t\t\n\n\n\n\t\t\n\t\t)\n}\n\n\nexport default FilmArray;","import React from 'react';\n\nconst People =  ({name,height,hairColor,eyeColor}) => {\n\treturn (\n\t\t<div>\n\t\t\t<h2>{name}</h2>\n\t\t\t<h3>Height: {height}</h3>\n\t\t\t<h3>Hair Color: {hairColor}</h3>\n\t\t\t<h3>Eye Color: {eyeColor}</h3>\n\t\t</div>\n\t\t)\n\n}\n\nexport default People;","import React from 'react';\n\nimport People from './People';\n\nconst PeopleArray = ({people}) => {\n\treturn(\n\n\t\t\n\t\t\tpeople.map((data,i) => {\n\t\t\t\treturn(\n\t\t\t\t\t<div className=\"bg-yellow shadow-5 tc dib pa4 ma3 br3 grow\">\n\t\t\t\t<People \n\t\t\t\tkey = {i}\n\t\t\t\tname = {people[i].name}\n\t\t\t\theight= {people[i].height}\n\t\t\t\thairColor={people[i].hair_color}\n\t\t\t\teyeColor={people[i].eye_color}\n\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t)\n\t\t\t})\n\t\t\t\n\n\t\t)\n\n}\n\n\nexport default PeopleArray;","import React from 'react';\nimport './Buttons.css';\n\nconst Buttons = ({onClickPeople,onClickFilms}) => {\n\treturn(\n\t\t<div className =\"container\">\n\n\t\t \n            <button className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black btn yellow\" src=\"#\" alt=\"\" value='films'onClick={onClickFilms}>Films</button>\n\t\t<button className=\"f6 grow no-underline br-pill ph3 pv2 mb2 dib white bg-black btn yellow\" src=\"#\" alt=\"\" value='people' onClick={onClickPeople}>Characters</button>\n\n\t\t</div> \n\t\t)\n}\n\nexport default Buttons;","import React, {Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport FilmArray from './Films';\nimport PeopleArray from './PeopleArray';\nimport Buttons from './Buttons';\n\nconst filmsURLS=[\n  \"https://swapi.co/api/films/\"\n]\n\nconst peopleURLS=[\n  \"https://swapi.co/api/people/\",\n  \"https://swapi.co/api/people/?page=2\",\n  \"https://swapi.co/api/people/?page=3\",\n  \"https://swapi.co/api/people/?page=4\",\n  \"https://swapi.co/api/people/?page=5\",\n  \"https://swapi.co/api/people/?page=6\",\n  \"https://swapi.co/api/people/?page=7\",\n  \"https://swapi.co/api/people/?page=8\",\n  ];\n\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      films:[],\n      people:[]\n    }\n   \n     this.onFilmsClick = this.onFilmsClick.bind(this);\n     this.onPeopleClick = this.onPeopleClick.bind(this);\n  }\nonFilmsClick (){\n\n    this.GetFilms()\n    this.setState({people: []})\n    \n  }\nonPeopleClick (){\n    this.setState({people: []})\n    this.GetPeople()\n    this.setState({films: []})\n    \n  }\n\nGetFilms(){\n    \n      fetch('https://swapi.co/api/films/')\n        .then(response => response.json())\n        .then(data => {this.setState({films:data.results })})\n\n\n    }\nGetPeople() {\n  Promise.all(peopleURLS.map(async url => {\n    await fetch(url)\n        .then(response => response.json())\n        .then(data => {this.setState({people:this.state.people.concat(data.results) })})\n\n}))\n}\n\n  \n \n  render() {\n    return (\n      <div className ='tc' >\n      <div className = 'starwars'>Star Wars</div>\n      <Buttons \n      onClickPeople = {this.onPeopleClick}\n      onClickFilms = {this.onFilmsClick}\n      /> \n    <FilmArray films ={this.state.films}/>\n    <PeopleArray people = {this.state.people} />\n   \n    </div> \n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}